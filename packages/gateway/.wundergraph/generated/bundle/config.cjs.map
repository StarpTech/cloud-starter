{
  "version": 3,
  "sources": ["../../wundergraph.config.ts", "../../wundergraph.server.ts", "../../wundergraph.operations.ts"],
  "sourcesContent": ["import {\n  configureWunderGraphApplication,\n  cors,\n  EnvironmentVariable,\n  introspect,\n} from \"@wundergraph/sdk\";\nimport server from \"./wundergraph.server\";\nimport operations from \"./wundergraph.operations\";\n\nconsole.log(\"test 11 \" + process.env.WG_OTEL_AUTH_TOKEN)\nconsole.log(\"foo 11 \" + process.env.FOO)\n\nconst spacex = introspect.graphql({\n  apiNamespace: \"spacex\",\n  url: 'https://spacex-api.fly.dev/graphql',\n});\n\n// configureWunderGraph emits the configuration\nconfigureWunderGraphApplication({\n  apis: [spacex],\n  server,\n  operations,\n  cors: {\n    ...cors.allowAll,\n    allowedOrigins:\n      process.env.NODE_ENV === \"production\"\n        ? [\n            // change this before deploying to production to the actual domain where you're deploying your app\n            \"http://localhost:3000\",\n          ]\n        : [\n            \"http://localhost:3000\",\n            new EnvironmentVariable(\"WG_ALLOWED_ORIGIN\"),\n          ],\n  }\n});\n", "import { configureWunderGraphServer } from \"@wundergraph/sdk/server\";\nimport type { HooksConfig } from \"./generated/wundergraph.hooks\";\nimport type { InternalClient } from \"./generated/wundergraph.internal.client\";\n\nexport default configureWunderGraphServer<HooksConfig, InternalClient>(() => ({\n  hooks: {\n    queries: {\n      Dragons: {\n        postResolve: async (hook) => {\n          hook.log.info(\"postResolve hook for Dragons\");\n        },\n      },\n    },\n    mutations: {},\n  }\n}));\n", "import { configureWunderGraphOperations } from \"@wundergraph/sdk\";\nimport type { OperationsConfiguration } from \"./generated/wundergraph.operations\";\n\nexport default configureWunderGraphOperations<OperationsConfiguration>({\n  operations: {\n    defaultConfig: {\n      authentication: {\n        required: false,\n      },\n    },\n    queries: (config) => ({\n      ...config,\n      caching: {\n        enable: false,\n        staleWhileRevalidate: 60,\n        maxAge: 60,\n        public: true,\n      },\n      liveQuery: {\n        enable: true,\n        pollingIntervalSeconds: 1,\n      },\n    }),\n    mutations: (config) => ({\n      ...config,\n    }),\n    subscriptions: (config) => ({\n      ...config,\n    }),\n    custom: {},\n  },\n});\n"],
  "mappings": "aAAA,IAAAA,EAKO,4BCLP,IAAAC,EAA2C,mCAIpCC,KAAQ,8BAAwD,KAAO,CAC5E,MAAO,CACL,QAAS,CACP,QAAS,CACP,YAAa,MAAOC,GAAS,CAC3BA,EAAK,IAAI,KAAK,8BAA8B,CAC9C,CACF,CACF,EACA,UAAW,CAAC,CACd,CACF,EAAE,ECfF,IAAAC,EAA+C,4BAGxCC,KAAQ,kCAAwD,CACrE,WAAY,CACV,cAAe,CACb,eAAgB,CACd,SAAU,EACZ,CACF,EACA,QAAUC,IAAY,CACpB,GAAGA,EACH,QAAS,CACP,OAAQ,GACR,qBAAsB,GACtB,OAAQ,GACR,OAAQ,EACV,EACA,UAAW,CACT,OAAQ,GACR,uBAAwB,CAC1B,CACF,GACA,UAAYA,IAAY,CACtB,GAAGA,CACL,GACA,cAAgBA,IAAY,CAC1B,GAAGA,CACL,GACA,OAAQ,CAAC,CACX,CACF,CAAC,EFtBD,QAAQ,IAAI,WAAa,QAAQ,IAAI,kBAAkB,EACvD,QAAQ,IAAI,UAAY,QAAQ,IAAI,GAAG,EAEvC,IAAMC,EAAS,aAAW,QAAQ,CAChC,aAAc,SACd,IAAK,oCACP,CAAC,KAGD,mCAAgC,CAC9B,KAAM,CAACA,CAAM,EACb,OAAAC,EACA,WAAAC,EACA,KAAM,CACJ,GAAG,OAAK,SACR,eACE,QAAQ,IAAI,WAAa,aACrB,CAEE,uBACF,EACA,CACE,wBACA,IAAI,sBAAoB,mBAAmB,CAC7C,CACR,CACF,CAAC",
  "names": ["import_sdk", "import_server", "wundergraph_server_default", "hook", "import_sdk", "wundergraph_operations_default", "config", "spacex", "wundergraph_server_default", "wundergraph_operations_default"]
}
